---
// Interface de Chat RAG pour le portfolio
import { getLangFromUrl, useTranslations } from '../i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section id="aboutme" class="py-16 px-4 sm:px-6 lg:px-8 relative">
  <div class="max-w-6xl mx-auto">
    <!-- Header Section -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">
        {t('chat.title')}
        <span class="bg-gradient-to-r from-primary-400 to-accent-400 bg-clip-text text-transparent">{t('chat.title_highlight')}</span>
      </h2>
      <p class="text-lg text-gray-300 max-w-3xl mx-auto">
        {t('chat.subtitle')}
      </p>
    </div>

    <!-- Chat Container -->
    <div class="glassmorphism rounded-3xl p-6 md:p-8 relative overflow-hidden max-w-4xl mx-auto">
      <!-- Background Gradient -->
      <div class="absolute inset-0 bg-gradient-to-br from-primary-500/5 via-accent-500/5 to-secondary-500/5 rounded-3xl"></div>
      
      <div class="relative z-10">
        <!-- Chat Messages Container -->
        <div id="chat-messages" class="space-y-4 mb-6 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent">
          <!-- Message d'accueil -->
          <div class="flex items-start space-x-3">
            <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-primary-500 to-accent-500 rounded-full flex items-center justify-center">
              <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
              </svg>
            </div>
            <div class="flex-1">
              <div class="glassmorphism rounded-2xl p-4 text-white">
                <p>{t('chat.welcome.message')}</p>
                <ul class="mt-2 space-y-1 text-sm text-gray-300">
                  {t('chat.welcome.topics').map((topic) => (
                    <li set:html={topic} />
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>

        <!-- Suggestions rapides -->
        <div id="quick-suggestions" class="mb-4">
          <p class="text-sm text-gray-400 mb-2">{t('chat.suggestions.label')}</p>
          <div class="flex flex-wrap gap-2">
            <button class="suggestion-btn px-3 py-1 text-xs glassmorphism text-primary-400 rounded-full hover:bg-white/10 transition-all duration-300 border border-primary-400/30">
              {t('chat.suggestions.questions')[0]}
            </button>
            <button class="suggestion-btn px-3 py-1 text-xs glassmorphism text-accent-400 rounded-full hover:bg-white/10 transition-all duration-300 border border-accent-400/30">
              {t('chat.suggestions.questions')[1]}
            </button>
            <button class="suggestion-btn px-3 py-1 text-xs glassmorphism text-secondary-400 rounded-full hover:bg-white/10 transition-all duration-300 border border-secondary-400/30">
              {t('chat.suggestions.questions')[2]}
            </button>
            <button class="suggestion-btn px-3 py-1 text-xs glassmorphism text-primary-300 rounded-full hover:bg-white/10 transition-all duration-300 border border-primary-300/30">
              {t('chat.suggestions.questions')[3]}
            </button>
          </div>
        </div>

        <!-- Input Area -->
        <div class="relative">
          <div class="flex space-x-3 items-end">
            <div class="flex-1 relative">
              <textarea 
                id="chat-input" 
                placeholder={t('chat.input.placeholder')}
                class="w-full p-4 pr-12 bg-white/5 border border-white/20 rounded-2xl text-white placeholder-gray-400 resize-none focus:outline-none focus:border-primary-400/50 focus:bg-white/10 transition-all duration-300"
                rows="1"
                maxlength="1000"
              ></textarea>
              <div class="absolute bottom-3 right-3 text-xs text-gray-500">
                <span id="char-count">0</span>/1000
              </div>
            </div>
            
            <button 
              id="send-btn" 
              class="flex-shrink-0 w-12 h-12 bg-gradient-to-r from-primary-500 to-accent-500 rounded-2xl flex items-center justify-center hover:from-primary-600 hover:to-accent-600 transition-all duration-300 transform hover:scale-105 ai-glow disabled:opacity-50 disabled:cursor-not-allowed"
              disabled
            >
              <svg id="send-icon" class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
              </svg>
              <svg id="loading-icon" class="w-5 h-5 text-white hidden animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Status indicator -->
        <div id="chat-status" class="mt-3 text-center">
          <div class="flex items-center justify-center space-x-2 text-sm text-gray-400">
            <div id="status-indicator" class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <span id="status-text">{t('chat.status.ready')}</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Info Footer -->
    <div class="mt-8 text-center">
      <p class="text-sm text-gray-400" set:html={t('chat.info')} />
    </div>
  </div>
</section>

<style>
  .ai-glow {
    box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);
  }
  
  .glassmorphism {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  /* Custom scrollbar */
  .scrollbar-thin::-webkit-scrollbar {
    width: 4px;
  }
  
  .scrollbar-thumb-white\/20::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
  }
  
  .scrollbar-track-transparent::-webkit-scrollbar-track {
    background: transparent;
  }

  /* Animation pour les nouveaux messages */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .message-enter {
    animation: fadeInUp 0.3s ease-out;
  }

  /* Auto-resize textarea */
  #chat-input {
    resize: none;
    overflow: hidden;
    min-height: 48px;
    max-height: 120px;
  }
</style>

<script>
  class ChatInterface {
    private messagesContainer: HTMLElement;
    private input: HTMLTextAreaElement;
    private sendBtn: HTMLButtonElement;
    private charCount: HTMLElement;
    private sendIcon: HTMLElement;
    private loadingIcon: HTMLElement;
    private statusText: HTMLElement;
    private statusIndicator: HTMLElement;
    private conversationHistory: Array<{role: string, content: string}> = [];

    constructor() {
      this.messagesContainer = document.getElementById('chat-messages')!;
      this.input = document.getElementById('chat-input') as HTMLTextAreaElement;
      this.sendBtn = document.getElementById('send-btn') as HTMLButtonElement;
      this.charCount = document.getElementById('char-count')!;
      this.sendIcon = document.getElementById('send-icon')!;
      this.loadingIcon = document.getElementById('loading-icon')!;
      this.statusText = document.getElementById('status-text')!;
      this.statusIndicator = document.getElementById('status-indicator')!;

      this.initializeEventListeners();
      this.checkSystemStatus();
    }

    private initializeEventListeners() {
      // Input events
      this.input.addEventListener('input', this.handleInputChange.bind(this));
      this.input.addEventListener('keydown', this.handleKeyDown.bind(this));
      
      // Send button
      this.sendBtn.addEventListener('click', this.sendMessage.bind(this));
      
      // Suggestion buttons
      document.querySelectorAll('.suggestion-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          this.input.value = target.textContent || '';
          this.handleInputChange();
          this.sendMessage();
        });
      });
    }

    private handleInputChange() {
      const value = this.input.value;
      this.charCount.textContent = value.length.toString();
      
      // Enable/disable send button
      this.sendBtn.disabled = value.trim().length === 0;
      
      // Auto-resize textarea
      this.input.style.height = 'auto';
      this.input.style.height = Math.min(this.input.scrollHeight, 120) + 'px';
    }

    private handleKeyDown(e: KeyboardEvent) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        if (!this.sendBtn.disabled) {
          this.sendMessage();
        }
      }
    }

    private async sendMessage() {
      const message = this.input.value.trim();
      if (!message) return;

      // Disable input
      this.setLoading(true);
      
      // Add user message to UI
      this.addMessage(message, 'user');
      
      // Clear input
      this.input.value = '';
      this.handleInputChange();

      try {
        // Send to API
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message,
            history: this.conversationHistory
          })
        });

        const data = await response.json();

        if (data.success) {
          // Add assistant response
          this.addMessage(data.data.answer, 'assistant', data.data.sources, data.data.confidence);
          
          // Update conversation history
          this.conversationHistory.push(
            { role: 'user', content: message },
            { role: 'assistant', content: data.data.answer }
          );
          
          // Keep only last 10 messages in history
          if (this.conversationHistory.length > 10) {
            this.conversationHistory = this.conversationHistory.slice(-10);
          }
        } else {
          this.addMessage('Désolé, une erreur s\'est produite. Veuillez réessayer.', 'assistant');
        }
      } catch (error) {
        console.error('Chat error:', error);
        this.addMessage('Erreur de connexion. Veuillez vérifier votre connexion internet et réessayer.', 'assistant');
      } finally {
        this.setLoading(false);
      }
    }

    private addMessage(content: string, role: 'user' | 'assistant', sources?: string[], confidence?: number) {
      const messageDiv = document.createElement('div');
      messageDiv.className = 'flex items-start space-x-3 message-enter';
      
      if (role === 'user') {
        messageDiv.innerHTML = `
          <div class="flex-1"></div>
          <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-accent-500 to-secondary-500 rounded-full flex items-center justify-center">
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
          <div class="flex-shrink-0 max-w-xs">
            <div class="bg-gradient-to-r from-accent-500/20 to-secondary-500/20 rounded-2xl p-4 text-white border border-accent-400/30">
              <p class="text-sm">${this.escapeHtml(content)}</p>
            </div>
          </div>
        `;
      } else {
        const sourcesHtml = sources && sources.length > 0 
          ? `<div class="mt-2 pt-2 border-t border-white/10">
               <p class="text-xs text-gray-400 mb-1">Sources :</p>
               <div class="space-y-1">
                 ${sources.map(source => `<p class="text-xs text-primary-400">📄 ${this.escapeHtml(source)}</p>`).join('')}
               </div>
             </div>`
          : '';
          
        const confidenceHtml = confidence !== undefined
          ? `<div class="mt-1">
               <span class="text-xs text-gray-500">Confiance: ${Math.round(confidence * 100)}%</span>
             </div>`
          : '';

        messageDiv.innerHTML = `
          <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-primary-500 to-accent-500 rounded-full flex items-center justify-center">
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
          </div>
          <div class="flex-1">
            <div class="glassmorphism rounded-2xl p-4 text-white">
              <p class="text-sm leading-relaxed">${this.formatResponse(content)}</p>
              ${sourcesHtml}
              ${confidenceHtml}
            </div>
          </div>
          <div class="flex-shrink-0 w-8"></div>
        `;
      }

      this.messagesContainer.appendChild(messageDiv);
      this.scrollToBottom();
    }

    private formatResponse(content: string): string {
      // Convert markdown-like formatting to HTML
      return content
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/`(.*?)`/g, '<code class="bg-white/10 px-1 rounded">$1</code>')
        .replace(/\n/g, '<br>');
    }

    private escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    private setLoading(loading: boolean) {
      this.input.disabled = loading;
      this.sendBtn.disabled = loading || this.input.value.trim().length === 0;
      
      if (loading) {
        this.sendIcon.classList.add('hidden');
        this.loadingIcon.classList.remove('hidden');
        this.statusText.textContent = 'Génération de la réponse...';
        this.statusIndicator.className = 'w-2 h-2 bg-yellow-400 rounded-full animate-pulse';
      } else {
        this.sendIcon.classList.remove('hidden');
        this.loadingIcon.classList.add('hidden');
        this.statusText.textContent = 'RAG System Ready';
        this.statusIndicator.className = 'w-2 h-2 bg-green-400 rounded-full animate-pulse';
      }
    }

    private scrollToBottom() {
      this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    }

    private async checkSystemStatus() {
      try {
        const response = await fetch('/api/index');
        const data = await response.json();
        
        if (data.success && data.indexed) {
          this.statusText.textContent = `Mistral RAG Ready (${data.count} docs)`;
          this.statusIndicator.className = 'w-2 h-2 bg-green-400 rounded-full animate-pulse';
        } else {
          this.statusText.textContent = 'Initialisation RAG...';
          this.statusIndicator.className = 'w-2 h-2 bg-yellow-400 rounded-full animate-pulse';
          // Trigger indexing
          await this.initializeSystem();
        }
      } catch (error) {
        console.error('Status check error:', error);
        this.statusText.textContent = 'Système hors ligne';
        this.statusIndicator.className = 'w-2 h-2 bg-red-400 rounded-full';
      }
    }

    private async initializeSystem() {
      try {
        this.statusText.textContent = 'Indexation en cours...';
        
        const response = await fetch('/api/index', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'index' })
        });
        
        const data = await response.json();
        
        if (data.success) {
          this.statusText.textContent = `RAG System Ready (${data.count} docs)`;
          this.statusIndicator.className = 'w-2 h-2 bg-green-400 rounded-full animate-pulse';
        }
      } catch (error) {
        console.error('Initialization error:', error);
        this.statusText.textContent = 'Erreur d\'initialisation';
        this.statusIndicator.className = 'w-2 h-2 bg-red-400 rounded-full';
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ChatInterface();
  });
</script>