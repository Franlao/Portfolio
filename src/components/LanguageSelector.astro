---
import { languages } from '../i18n';

interface Props {
  currentLang: string;
  currentPath: string;
}

const { currentLang, currentPath } = Astro.props;

function getLocalizedPath(newLang: string, path: string) {
  // Remove current language prefix if exists
  const pathWithoutLang = path.replace(/^\/[a-z]{2}\//, '/').replace(/^\/[a-z]{2}$/, '/');
  
  // Add new language prefix if not default
  if (newLang === 'fr') {
    return pathWithoutLang === '/' ? '/' : pathWithoutLang;
  } else {
    return `/en${pathWithoutLang === '/' ? '' : pathWithoutLang}`;
  }
}
---

<div class="language-selector relative">
  <button 
    id="lang-toggle" 
    class="flex items-center space-x-2 px-3 py-2 rounded-lg glassmorphism hover:bg-white/10 transition-all duration-300"
    aria-label="Change language"
  >
    <span class="text-sm font-medium text-white">
      {currentLang.toUpperCase()}
    </span>
    <svg class="w-4 h-4 text-white transition-transform duration-300" id="lang-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  
  <div 
    id="lang-dropdown" 
    class="absolute top-full right-0 mt-2 min-w-[120px] glassmorphism rounded-lg shadow-lg opacity-0 invisible transform scale-95 transition-all duration-300 z-50"
  >
    {Object.entries(languages).map(([code, name]) => (
      <a
        href={getLocalizedPath(code, currentPath)}
        class={`block px-4 py-2 text-sm transition-colors duration-200 first:rounded-t-lg last:rounded-b-lg ${
          code === currentLang 
            ? 'bg-primary-500/20 text-primary-400' 
            : 'text-gray-300 hover:bg-white/10 hover:text-white'
        }`}
      >
        <div class="flex items-center space-x-3">
          <span class="text-lg">{code === 'fr' ? 'ðŸ‡«ðŸ‡·' : 'ðŸ‡ºðŸ‡¸'}</span>
          <span>{name}</span>
        </div>
      </a>
    ))}
  </div>
</div>

<script>
  function initLanguageSelector() {
    const toggle = document.getElementById('lang-toggle');
    const dropdown = document.getElementById('lang-dropdown');
    const arrow = document.getElementById('lang-arrow');
    
    if (!toggle || !dropdown || !arrow) return;
    
    let isOpen = false;
    
    function toggleDropdown() {
      isOpen = !isOpen;
      
      if (isOpen) {
        dropdown.classList.remove('opacity-0', 'invisible', 'scale-95');
        dropdown.classList.add('opacity-100', 'visible', 'scale-100');
        arrow.style.transform = 'rotate(180deg)';
      } else {
        dropdown.classList.add('opacity-0', 'invisible', 'scale-95');
        dropdown.classList.remove('opacity-100', 'visible', 'scale-100');
        arrow.style.transform = 'rotate(0deg)';
      }
    }
    
    function closeDropdown() {
      if (isOpen) {
        isOpen = false;
        dropdown.classList.add('opacity-0', 'invisible', 'scale-95');
        dropdown.classList.remove('opacity-100', 'visible', 'scale-100');
        arrow.style.transform = 'rotate(0deg)';
      }
    }
    
    toggle.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleDropdown();
    });
    
    document.addEventListener('click', closeDropdown);
    
    dropdown.addEventListener('click', (e) => {
      e.stopPropagation();
    });
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initLanguageSelector);
  
  // Reinitialize on navigation (for SPAs)
  document.addEventListener('astro:page-load', initLanguageSelector);
</script>

<style>
  .glassmorphism {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
</style>