---
// Interactive Skills Visualization Component
import { getLangFromUrl, useTranslations } from '../i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div id="skills-visualization" class="relative w-full h-[600px] overflow-hidden rounded-3xl bg-gradient-to-br from-dark-800/50 to-dark-900/50 backdrop-blur-sm border border-white/10">
  <!-- Canvas for 3D visualization -->
  <canvas id="skills-canvas" class="absolute inset-0 w-full h-full"></canvas>
  
  <!-- Tooltip -->
  <div id="skill-tooltip" class="absolute z-50 pointer-events-none opacity-0 transition-all duration-300 transform translate-y-2">
    <div class="glassmorphism rounded-xl p-4 max-w-xs">
      <h3 id="tooltip-title" class="text-white font-semibold text-sm mb-1"></h3>
      <p id="tooltip-description" class="text-gray-300 text-xs"></p>
      <div id="tooltip-domain" class="text-xs mt-2 px-2 py-1 rounded-full inline-block"></div>
    </div>
  </div>
  
  <!-- Skill Detail Modal -->
  <div id="skill-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/50 backdrop-blur-sm">
    <div class="glassmorphism rounded-3xl p-8 max-w-2xl mx-4 relative">
      <button id="modal-close" class="absolute top-4 right-4 text-gray-400 hover:text-white transition-colors">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      
      <div id="modal-content" class="space-y-6">
        <div class="flex items-center space-x-4">
          <div id="modal-icon" class="w-16 h-16 rounded-xl flex items-center justify-center text-2xl font-bold"></div>
          <div>
            <h2 id="modal-title" class="text-2xl font-bold text-white"></h2>
            <p id="modal-domain" class="text-sm opacity-80"></p>
          </div>
        </div>
        
        <div id="modal-description" class="text-gray-300 leading-relaxed"></div>
        
        <div>
          <h3 class="text-lg font-semibold text-white mb-3">Utilisation dans mes projets</h3>
          <div id="modal-projects" class="space-y-2"></div>
        </div>
        
        <div class="flex space-x-4">
          <a id="modal-docs-link" href="#" target="_blank" rel="noopener" class="flex items-center px-4 py-2 bg-gradient-to-r from-primary-500 to-accent-500 text-white rounded-lg hover:from-primary-600 hover:to-accent-600 transition-all duration-300">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
            </svg>
            Documentation
          </a>
          
          <button id="modal-cluster-btn" class="flex items-center px-4 py-2 glassmorphism text-white rounded-lg hover:bg-white/10 transition-all duration-300">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
            Voir le cluster
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Domain Filter Controls -->
  <div class="absolute top-4 left-4 flex flex-wrap gap-2 z-10">
    <button class="domain-filter active" data-domain="all">
      <span class="glassmorphism px-3 py-1 rounded-full text-sm font-medium text-white transition-all duration-300">
        {t('skills.domains.all')}
      </span>
    </button>
    <button class="domain-filter" data-domain="ai">
      <span class="glassmorphism px-3 py-1 rounded-full text-sm font-medium text-primary-400 transition-all duration-300">
        {t('skills.domains.ai')}
      </span>
    </button>
    <button class="domain-filter" data-domain="ml">
      <span class="glassmorphism px-3 py-1 rounded-full text-sm font-medium text-accent-400 transition-all duration-300">
        {t('skills.domains.ml')}
      </span>
    </button>
    <button class="domain-filter" data-domain="datascience">
      <span class="glassmorphism px-3 py-1 rounded-full text-sm font-medium text-secondary-400 transition-all duration-300">
        {t('skills.domains.datascience')}
      </span>
    </button>
    <button class="domain-filter" data-domain="dataeng">
      <span class="glassmorphism px-3 py-1 rounded-full text-sm font-medium text-primary-300 transition-all duration-300">
        {t('skills.domains.dataeng')}
      </span>
    </button>
    <button class="domain-filter" data-domain="rag">
      <span class="glassmorphism px-3 py-1 rounded-full text-sm font-medium text-accent-300 transition-all duration-300">
        {t('skills.domains.rag')}
      </span>
    </button>
  </div>
  
  <!-- Instructions -->
  <div class="absolute bottom-4 right-4 glassmorphism px-4 py-2 rounded-lg text-sm text-gray-300 z-10">
    <p class="mb-1">üñ±Ô∏è {t('skills.click_drag')}</p>
    <p>üëÜ {t('skills.click_details')}</p>
  </div>
</div>

<style>
  .glassmorphism {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .domain-filter.active span {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.3);
  }
  
  .domain-filter:hover span {
    background: rgba(255, 255, 255, 0.1);
    transform: scale(1.05);
  }
  
  #skills-canvas {
    cursor: grab;
  }
  
  #skills-canvas:active {
    cursor: grabbing;
  }
  
  #skill-modal {
    backdrop-filter: blur(10px);
  }
  
  .animate-pulse-glow {
    animation: pulse-glow 2s ease-in-out infinite;
  }
  
  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 0 10px rgba(34, 197, 94, 0.3);
    }
    50% {
      box-shadow: 0 0 20px rgba(34, 197, 94, 0.6);
    }
  }
</style>

<script>
  // Skills data with clustering information
  const skillsData = {
    ai: {
      name: "Intelligence Artificielle",
      color: "#38bdf8", // primary-400
      tools: [
        {
          name: "PyTorch",
          icon: "üî•",
          description: "Framework de deep learning pour la recherche et la production",
          projects: ["G√©n√©rateur de donn√©es synth√©tiques IVECO", "Mod√®les pr√©dictifs CHU"],
          docs: "https://pytorch.org/",
          embedding: [0.9, 0.8, 0.1, 0.2, 0.7]
        },
        {
          name: "TensorFlow",
          icon: "üß†",
          description: "Plateforme ML compl√®te pour l'IA et le machine learning",
          projects: ["Analyses pr√©dictives en sant√©", "Mod√®les de classification"],
          docs: "https://tensorflow.org/",
          embedding: [0.8, 0.9, 0.2, 0.1, 0.6]
        },
        {
          name: "OpenAI API",
          icon: "ü§ñ",
          description: "API pour l'int√©gration de mod√®les GPT et DALL-E",
          projects: ["Chatbot RAG portfolio", "G√©n√©ration de contenu"],
          docs: "https://openai.com/api/",
          embedding: [0.7, 0.3, 0.1, 0.0, 0.9]
        },
        {
          name: "Hugging Face",
          icon: "ü§ó",
          description: "Hub de mod√®les pr√©-entra√Æn√©s et outils NLP",
          projects: ["Fine-tuning de mod√®les", "Transformers personnalis√©s"],
          docs: "https://huggingface.co/",
          embedding: [0.8, 0.5, 0.2, 0.1, 0.8]
        },
        {
          name: "CrewAI",
          icon: "üë•",
          description: "Framework pour cr√©er des √©quipes d'agents IA collaboratifs",
          projects: ["Syst√®mes multi-agents", "Automatisation complexe"],
          docs: "https://crewai.com/",
          embedding: [0.8, 0.4, 0.1, 0.2, 0.9]
        }
      ]
    },
    ml: {
      name: "Machine Learning",
      color: "#4ade80", // accent-400
      tools: [
        {
          name: "Scikit-learn",
          icon: "üìä",
          description: "Biblioth√®que ML simple et efficace pour Python",
          projects: ["Analyses ERIC Lab", "Mod√®les de pr√©diction"],
          docs: "https://scikit-learn.org/",
          embedding: [0.2, 0.9, 0.8, 0.3, 0.1]
        },
        {
          name: "XGBoost",
          icon: "üå≤",
          description: "Gradient boosting optimis√© pour les performances",
          projects: ["Pr√©dictions de risque CHU", "Optimisation automobile"],
          docs: "https://xgboost.readthedocs.io/",
          embedding: [0.1, 0.8, 0.9, 0.2, 0.0]
        },
        {
          name: "MLflow",
          icon: "üîÑ",
          description: "Plateforme de gestion du cycle de vie ML",
          projects: ["Tracking d'exp√©riences", "D√©ploiement de mod√®les"],
          docs: "https://mlflow.org/",
          embedding: [0.3, 0.7, 0.6, 0.8, 0.2]
        },
        {
          name: "H2O.ai",
          icon: "üíß",
          description: "Plateforme AutoML pour le machine learning rapide",
          projects: ["AutoML pour pr√©dictions", "Mod√®les explicables"],
          docs: "https://h2o.ai/",
          embedding: [0.2, 0.8, 0.7, 0.4, 0.1]
        }
      ]
    },
    datascience: {
      name: "Data Science",
      color: "#e879f9", // secondary-400
      tools: [
        {
          name: "Pandas",
          icon: "üêº",
          description: "Manipulation et analyse de donn√©es avec Python",
          projects: ["Analyse CHU de Lille", "Traitement donn√©es IVECO"],
          docs: "https://pandas.pydata.org/",
          embedding: [0.1, 0.3, 0.9, 0.7, 0.0]
        },
        {
          name: "NumPy",
          icon: "üî¢",
          description: "Calcul num√©rique et manipulation d'arrays",
          projects: ["Calculs statistiques", "Pr√©processing de donn√©es"],
          docs: "https://numpy.org/",
          embedding: [0.0, 0.2, 0.8, 0.6, 0.1]
        },
        {
          name: "Matplotlib",
          icon: "üìà",
          description: "Visualisation de donn√©es et graphiques Python",
          projects: ["Dashboards analytiques", "Rapports de recherche"],
          docs: "https://matplotlib.org/",
          embedding: [0.0, 0.1, 0.7, 0.8, 0.0]
        },
        {
          name: "Seaborn",
          icon: "üé®",
          description: "Visualisation statistique bas√©e sur matplotlib",
          projects: ["Analyses exploratoires", "Visualisations m√©dicales"],
          docs: "https://seaborn.pydata.org/",
          embedding: [0.0, 0.1, 0.6, 0.9, 0.0]
        },
        {
          name: "Jupyter",
          icon: "üìì",
          description: "Environnement interactif pour la data science",
          projects: ["Prototypage rapide", "Analyses exploratoires"],
          docs: "https://jupyter.org/",
          embedding: [0.1, 0.2, 0.8, 0.7, 0.1]
        }
      ]
    },
    dataeng: {
      name: "Data Engineering",
      color: "#7dd3fc", // primary-300
      tools: [
        {
          name: "Apache Spark",
          icon: "‚ö°",
          description: "Traitement de donn√©es distribu√©es √† grande √©chelle",
          projects: ["Pipeline de donn√©es IVECO", "Traitement batch"],
          docs: "https://spark.apache.org/",
          embedding: [0.2, 0.1, 0.3, 0.9, 0.1]
        },
        {
          name: "Docker",
          icon: "üê≥",
          description: "Conteneurisation et d√©ploiement d'applications",
          projects: ["D√©ploiement de mod√®les", "Environnements isol√©s"],
          docs: "https://docker.com/",
          embedding: [0.3, 0.2, 0.4, 0.8, 0.2]
        },
        {
          name: "PostgreSQL",
          icon: "üêò",
          description: "Base de donn√©es relationnelle avanc√©e",
          projects: ["Stockage donn√©es m√©dicales", "Entrep√¥t de donn√©es"],
          docs: "https://postgresql.org/",
          embedding: [0.0, 0.0, 0.5, 0.9, 0.0]
        },
        {
          name: "Redis",
          icon: "üî¥",
          description: "Base de donn√©es en m√©moire pour le caching",
          projects: ["Cache de mod√®les", "Sessions utilisateur"],
          docs: "https://redis.io/",
          embedding: [0.1, 0.0, 0.2, 0.8, 0.1]
        },
        {
          name: "Neo4j",
          icon: "üîó",
          description: "Base de donn√©es graphe native pour les relations complexes",
          projects: ["Analyse des r√©seaux", "Graphes de connaissances"],
          docs: "https://neo4j.com/",
          embedding: [0.2, 0.1, 0.4, 0.8, 0.2]
        },
        {
          name: "Databricks",
          icon: "üß±",
          description: "Plateforme analytique unifi√©e pour big data et ML",
          projects: ["Analytics √† grande √©chelle", "MLOps"],
          docs: "https://databricks.com/",
          embedding: [0.4, 0.5, 0.6, 0.9, 0.3]
        },
        {
          name: "FastAPI",
          icon: "‚ö°",
          description: "Framework web moderne et rapide pour Python",
          projects: ["APIs de mod√®les ML", "Services web"],
          docs: "https://fastapi.tiangolo.com/",
          embedding: [0.3, 0.2, 0.3, 0.8, 0.4]
        },
        {
          name: "Flask",
          icon: "üå∂Ô∏è",
          description: "Framework web l√©ger et flexible pour Python",
          projects: ["Prototypage rapide", "Applications web"],
          docs: "https://flask.palletsprojects.com/",
          embedding: [0.2, 0.1, 0.3, 0.7, 0.3]
        },
        {
          name: "N8N",
          icon: "üîÑ",
          description: "Plateforme d'automatisation workflow avec interface visuelle",
          projects: ["Automatisation des pipelines", "Int√©grations"],
          docs: "https://n8n.io/",
          embedding: [0.1, 0.0, 0.2, 0.8, 0.1]
        }
      ]
    },
    rag: {
      name: "RAG Architecture",
      color: "#86efac", // accent-300
      tools: [
        {
          name: "LangChain",
          icon: "üîó",
          description: "Framework pour d√©velopper des applications avec LLM",
          projects: ["Chatbot portfolio", "Syst√®me de Q&A intelligent"],
          docs: "https://langchain.com/",
          embedding: [0.6, 0.1, 0.0, 0.1, 0.9]
        },
        {
          name: "ChromaDB",
          icon: "üé®",
          description: "Base de donn√©es vectorielle pour embeddings",
          projects: ["Recherche s√©mantique", "Stockage de connaissances"],
          docs: "https://trychroma.com/",
          embedding: [0.4, 0.0, 0.1, 0.2, 0.8]
        },
        {
          name: "OLLAMA",
          icon: "ü¶ô",
          description: "Ex√©cution locale de mod√®les de langage",
          projects: ["Inf√©rence locale", "Mod√®les personnalis√©s"],
          docs: "https://ollama.ai/",
          embedding: [0.7, 0.2, 0.0, 0.0, 0.8]
        },
        {
          name: "Mistral AI",
          icon: "üå™Ô∏è",
          description: "Mod√®les de langage fran√ßais haute performance",
          projects: ["G√©n√©ration de texte", "Embeddings s√©mantiques"],
          docs: "https://mistral.ai/",
          embedding: [0.5, 0.1, 0.0, 0.0, 0.9]
        },
        {
          name: "Pinecone",
          icon: "üå≤",
          description: "Base de donn√©es vectorielle g√©r√©e",
          projects: ["Recherche √† grande √©chelle", "Recommandations"],
          docs: "https://pinecone.io/",
          embedding: [0.3, 0.0, 0.1, 0.3, 0.7]
        }
      ]
    }
  };

  class InteractiveSkillsVisualization {
    constructor() {
      this.canvas = document.getElementById('skills-canvas');
      this.ctx = this.canvas.getContext('2d');
      this.tooltip = document.getElementById('skill-tooltip');
      this.modal = document.getElementById('skill-modal');
      
      this.mouse = { x: 0, y: 0 };
      this.nodes = [];
      this.selectedDomain = 'all';
      this.hoveredNode = null;
      
      // Drag and drop state
      this.isDragging = false;
      this.dragStartPos = { x: 0, y: 0 };
      this.dragOffset = { x: 0, y: 0 };
      this.clusterCenters = {};
      
      this.init();
    }
    
    init() {
      this.setupCanvas();
      this.createNodes();
      this.setupEventListeners();
      this.animate();
    }
    
    setupCanvas() {
      const rect = this.canvas.getBoundingClientRect();
      this.canvas.width = rect.width * devicePixelRatio;
      this.canvas.height = rect.height * devicePixelRatio;
      this.ctx.scale(devicePixelRatio, devicePixelRatio);
      this.canvas.style.width = rect.width + 'px';
      this.canvas.style.height = rect.height + 'px';
    }
    
    createNodes() {
      this.nodes = [];
      const centerX = this.canvas.width / (2 * devicePixelRatio);
      const centerY = this.canvas.height / (2 * devicePixelRatio);
      
      Object.entries(skillsData).forEach(([domain, data]) => {
        data.tools.forEach((tool, index) => {
          const angle = (index / data.tools.length) * Math.PI * 2;
          const radius = 120 + Math.random() * 80; // Increased spacing
          
          const node = {
            id: `${domain}-${tool.name}`,
            domain: domain,
            name: tool.name,
            icon: tool.icon,
            description: tool.description,
            projects: tool.projects,
            docs: tool.docs,
            color: data.color,
            embedding: tool.embedding,
            
            // Position
            x: centerX + Math.cos(angle) * radius,
            y: centerY + Math.sin(angle) * radius,
            targetX: centerX + Math.cos(angle) * radius,
            targetY: centerY + Math.sin(angle) * radius,
            
            // Physics
            vx: 0,
            vy: 0,
            radius: 25 + Math.random() * 15, // Slightly larger nodes
            
            // Visual
            opacity: 1,
            scale: 1,
            glowIntensity: 0,
            
            // Animation
            rotationSpeed: 0.01 + Math.random() * 0.02,
            pulsePhase: Math.random() * Math.PI * 2,
            floatAmplitude: 5 + Math.random() * 10
          };
          
          this.nodes.push(node);
        });
      });
      
      this.updateClustering();
    }
    
    updateClustering() {
      const centerX = this.canvas.width / (2 * devicePixelRatio);
      const centerY = this.canvas.height / (2 * devicePixelRatio);
      
      // Initialize cluster centers if not exists
      Object.keys(skillsData).forEach(domain => {
        if (!this.clusterCenters[domain]) {
          const domainIndex = Object.keys(skillsData).indexOf(domain);
          const domainAngle = (domainIndex / Object.keys(skillsData).length) * Math.PI * 2;
          const similarity = 0.5; // Default similarity
          const clusterOffset = similarity * 200;
          
          this.clusterCenters[domain] = {
            x: centerX + Math.cos(domainAngle) * clusterOffset,
            y: centerY + Math.sin(domainAngle) * clusterOffset
          };
        }
      });
      
      this.nodes.forEach(node => {
        if (this.selectedDomain === 'all' || this.selectedDomain === node.domain) {
          // Use cluster center position with randomness
          const clusterCenter = this.clusterCenters[node.domain];
          
          node.targetX = clusterCenter.x + (Math.random() - 0.5) * 180;
          node.targetY = clusterCenter.y + (Math.random() - 0.5) * 180;
          
          node.opacity = 1;
          node.scale = 1;
        } else {
          node.opacity = 0.3;
          node.scale = 0.8;
        }
      });
    }
    
    calculateEmbeddingSimilarity(embedding) {
      // Simple similarity calculation based on embeddings only
      return embedding.reduce((sum, val) => sum + val, 0) / embedding.length;
    }
    
    setupEventListeners() {
      // Mouse movement
      this.canvas.addEventListener('mousemove', (e) => {
        const rect = this.canvas.getBoundingClientRect();
        this.mouse.x = e.clientX - rect.left;
        this.mouse.y = e.clientY - rect.top;
        
        this.handleMouseMove(e);
      });
      
      // Mouse down
      this.canvas.addEventListener('mousedown', (e) => {
        if (e.button === 0) { // Left click only
          const rect = this.canvas.getBoundingClientRect();
          const mouseX = e.clientX - rect.left;
          const mouseY = e.clientY - rect.top;
          
          this.handleMouseDown(mouseX, mouseY);
        }
      });
      
      // Mouse up
      this.canvas.addEventListener('mouseup', (e) => {
        if (e.button === 0) { // Left click only
          const rect = this.canvas.getBoundingClientRect();
          const mouseX = e.clientX - rect.left;
          const mouseY = e.clientY - rect.top;
          
          this.handleMouseUp(mouseX, mouseY);
        }
      });
      
      // Prevent context menu on right click
      this.canvas.addEventListener('contextmenu', (e) => {
        e.preventDefault();
      });
      
      // Domain filters
      document.querySelectorAll('.domain-filter').forEach(btn => {
        btn.addEventListener('click', (e) => {
          document.querySelectorAll('.domain-filter').forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          this.selectedDomain = btn.dataset.domain;
          this.updateClustering();
        });
      });
      
      // Modal close
      document.getElementById('modal-close').addEventListener('click', () => {
        this.closeModal();
      });
      
      document.getElementById('skill-modal').addEventListener('click', (e) => {
        if (e.target === document.getElementById('skill-modal')) {
          this.closeModal();
        }
      });
      
      // Resize
      window.addEventListener('resize', () => {
        this.setupCanvas();
        this.updateClustering();
      });
    }
    
    handleMouseDown(mouseX, mouseY) {
      this.isDragging = false;
      this.dragStartPos = { x: mouseX, y: mouseY };
      
      // Check if clicking on a cluster center area
      const draggedDomain = this.getDomainAtPosition(mouseX, mouseY);
      if (draggedDomain) {
        this.isDragging = true;
        this.draggedDomain = draggedDomain;
        this.dragOffset = {
          x: mouseX - this.clusterCenters[draggedDomain].x,
          y: mouseY - this.clusterCenters[draggedDomain].y
        };
        (this.canvas as HTMLCanvasElement).style.cursor = 'grabbing';
      }
    }
    
    handleMouseMove(e) {
      if (this.isDragging && this.draggedDomain) {
        // Update cluster center position
        this.clusterCenters[this.draggedDomain].x = this.mouse.x - this.dragOffset.x;
        this.clusterCenters[this.draggedDomain].y = this.mouse.y - this.dragOffset.y;
        
        // Update nodes target positions
        this.updateClusterNodes(this.draggedDomain);
        return;
      }
      
      this.hoveredNode = null;
      
      this.nodes.forEach(node => {
        const dx = this.mouse.x - node.x;
        const dy = this.mouse.y - node.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < node.radius) {
          this.hoveredNode = node;
          node.glowIntensity = 1;
          this.showTooltip(node);
        } else {
          node.glowIntensity *= 0.95;
        }
      });
      
      // Check if hovering over a cluster center for cursor change
      const hoveredDomain = this.getDomainAtPosition(this.mouse.x, this.mouse.y);
      if (hoveredDomain && !this.isDragging) {
        (this.canvas as HTMLCanvasElement).style.cursor = 'grab';
      } else if (!this.isDragging) {
        (this.canvas as HTMLCanvasElement).style.cursor = 'default';
      }
      
      if (!this.hoveredNode) {
        this.hideTooltip();
      }
    }
    
    handleMouseUp(mouseX, mouseY) {
      if (this.isDragging) {
        this.isDragging = false;
        this.draggedDomain = null;
        (this.canvas as HTMLCanvasElement).style.cursor = 'default';
      } else {
        // Check if it's a click (not a drag)
        const dragDistance = Math.sqrt(
          Math.pow(mouseX - this.dragStartPos.x, 2) + 
          Math.pow(mouseY - this.dragStartPos.y, 2)
        );
        
        if (dragDistance < 5) { // Consider it a click if moved less than 5px
          this.handleClick(mouseX, mouseY);
        }
      }
    }
    
    getDomainAtPosition(x, y) {
      for (const [domain, center] of Object.entries(this.clusterCenters)) {
        const dx = x - center.x;
        const dy = y - center.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 80) { // Cluster center radius
          return domain;
        }
      }
      return null;
    }
    
    updateClusterNodes(domain) {
      this.nodes.forEach(node => {
        if (node.domain === domain) {
          const clusterCenter = this.clusterCenters[domain];
          node.targetX = clusterCenter.x + (Math.random() - 0.5) * 180;
          node.targetY = clusterCenter.y + (Math.random() - 0.5) * 180;
        }
      });
    }
    
    handleClick(mouseX, mouseY) {
      this.nodes.forEach(node => {
        const dx = mouseX - node.x;
        const dy = mouseY - node.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < node.radius) {
          this.showModal(node);
        }
      });
    }
    
    showTooltip(node) {
      this.tooltip.style.opacity = '1';
      this.tooltip.style.transform = 'translateY(0)';
      this.tooltip.style.left = (this.mouse.x + 20) + 'px';
      this.tooltip.style.top = (this.mouse.y - 10) + 'px';
      
      document.getElementById('tooltip-title').textContent = node.name;
      document.getElementById('tooltip-description').textContent = node.description;
      
      const domainBadge = document.getElementById('tooltip-domain');
      domainBadge.textContent = skillsData[node.domain].name;
      domainBadge.style.backgroundColor = node.color + '20';
      domainBadge.style.color = node.color;
      domainBadge.style.borderColor = node.color + '50';
    }
    
    hideTooltip() {
      this.tooltip.style.opacity = '0';
      this.tooltip.style.transform = 'translateY(10px)';
    }
    
    showModal(node) {
      this.modal.classList.remove('hidden');
      this.modal.classList.add('flex');
      
      // Modal content
      const modalIcon = document.getElementById('modal-icon');
      modalIcon.textContent = node.icon;
      modalIcon.style.backgroundColor = node.color + '20';
      modalIcon.style.color = node.color;
      
      document.getElementById('modal-title').textContent = node.name;
      document.getElementById('modal-domain').textContent = skillsData[node.domain].name;
      document.getElementById('modal-description').textContent = node.description;
      
      // Projects
      const projectsContainer = document.getElementById('modal-projects');
      projectsContainer.innerHTML = '';
      node.projects.forEach(project => {
        const projectDiv = document.createElement('div');
        projectDiv.className = 'text-sm text-gray-300 flex items-center';
        projectDiv.innerHTML = `
          <svg class="w-4 h-4 mr-2 text-accent-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          ${project}
        `;
        projectsContainer.appendChild(projectDiv);
      });
      
      // Documentation link
      document.getElementById('modal-docs-link').href = node.docs;
      
      // Cluster button
      document.getElementById('modal-cluster-btn').onclick = () => {
        this.closeModal();
        this.selectedDomain = node.domain;
        document.querySelectorAll('.domain-filter').forEach(btn => {
          btn.classList.toggle('active', btn.dataset.domain === node.domain);
        });
        this.updateClustering();
      };
    }
    
    closeModal() {
      this.modal.classList.add('hidden');
      this.modal.classList.remove('flex');
    }
    
    animate() {
      this.ctx.clearRect(0, 0, this.canvas.width / devicePixelRatio, this.canvas.height / devicePixelRatio);
      
      const time = Date.now() * 0.001; // Time in seconds
      
      // Update physics and animations
      this.nodes.forEach(node => {
        // Apply forces
        const dx = node.targetX - node.x;
        const dy = node.targetY - node.y;
        
        node.vx += dx * 0.02;
        node.vy += dy * 0.02;
        
        // Damping
        node.vx *= 0.9;
        node.vy *= 0.9;
        
        // Update position with floating animation
        const floatOffset = Math.sin(time * 0.5 + node.pulsePhase) * node.floatAmplitude;
        node.x += node.vx;
        node.y += node.vy + floatOffset * 0.1;
        
        // Pulsing scale animation
        const pulseScale = 1 + Math.sin(time * 2 + node.pulsePhase) * 0.05;
        node.animatedScale = node.scale * pulseScale;
        
        // Rotation animation
        node.rotation = (node.rotation || 0) + node.rotationSpeed;
        
        // Dynamic glow intensity
        if (node.glowIntensity <= 0) {
          node.glowIntensity = 0.3 + Math.sin(time * 1.5 + node.pulsePhase) * 0.2;
        }
      });
      
      // Draw connections between similar tools with animated opacity
      this.ctx.strokeStyle = `rgba(255, 255, 255, ${0.1 + Math.sin(time * 0.5) * 0.05})`;
      this.ctx.lineWidth = 1;
      
      this.nodes.forEach(node1 => {
        this.nodes.forEach(node2 => {
          if (node1 !== node2 && node1.domain === node2.domain) {
            const dx = node1.x - node2.x;
            const dy = node1.y - node2.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 150) { // Increased connection range
              this.ctx.beginPath();
              this.ctx.moveTo(node1.x, node1.y);
              this.ctx.lineTo(node2.x, node2.y);
              this.ctx.stroke();
            }
          }
        });
      });
      
      // Draw nodes with enhanced animations
      this.nodes.forEach(node => {
        this.ctx.save();
        this.ctx.globalAlpha = node.opacity;
        
        // Enhanced glow effect
        if (node.glowIntensity > 0) {
          this.ctx.shadowColor = node.color;
          this.ctx.shadowBlur = 25 * node.glowIntensity;
        }
        
        // Translate to node position for rotation
        this.ctx.translate(node.x, node.y);
        this.ctx.rotate(node.rotation);
        
        // Node background with gradient
        const gradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, node.radius * node.animatedScale);
        gradient.addColorStop(0, node.color + '40');
        gradient.addColorStop(0.7, node.color + '20');
        gradient.addColorStop(1, node.color + '10');
        
        this.ctx.fillStyle = gradient;
        this.ctx.strokeStyle = node.color;
        this.ctx.lineWidth = 2 + Math.sin(time * 3 + node.pulsePhase) * 0.5;
        this.ctx.beginPath();
        this.ctx.arc(0, 0, node.radius * node.animatedScale, 0, Math.PI * 2);
        this.ctx.fill();
        this.ctx.stroke();
        
        // Icon with slight rotation counter-effect
        this.ctx.rotate(-node.rotation * 0.5);
        this.ctx.font = `${18 * node.animatedScale}px Arial`;
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        this.ctx.fillStyle = node.color;
        this.ctx.fillText(node.icon, 0, 0);
        
        this.ctx.restore();
      });
      
      requestAnimationFrame(() => this.animate());
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new InteractiveSkillsVisualization();
  });
</script>